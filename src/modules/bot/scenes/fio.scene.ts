import { Action, Ctx, Hears, On, Scene, SceneEnter } from 'nestjs-telegraf';
import { Injectable } from '@nestjs/common';
import { SceneContext } from 'telegraf/typings/scenes';
import { ISession } from '../../../common/interfaces/session.interface';
import { UserEntity } from '../../user/entities/user.entity';

@Injectable()
@Scene('fio')
export class FioScene {
  constructor() {}

  @SceneEnter()
  async enter(@Ctx() ctx: SceneContext & ISession) {
    await ctx.reply(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏. *–ê–∑–∞–º–∞—Ç–æ–≤ –ê–∑–∞–º–∞—Ç –ê–∑–∞–º–∞—Ç–æ–≤–∏—á*',
      {
        parse_mode: 'Markdown',
      },
    );
  }

  @Hears('/menu')
  async returnBase(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Hears('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
  async returnBase2(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @On('message')
  async fio(@Ctx() ctx: SceneContext & ISession) {
    try {
      ctx.session.fio = ctx.message['text'];
      console.log(ctx.message['text']);
      await ctx.reply(ctx.session.fio, {
        reply_markup: {
          inline_keyboard: [[{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'accept' }]],
        },
      });
    } catch (err) {
      console.log(err.message);
    }
  }

  @Action(/accept/)
  async accept(@Ctx() ctx: SceneContext & ISession) {
    try {
      const user = await UserEntity.findOneOrFail({
        where: {
          telegram_id: ctx.from.id.toString(),
        },
      });
      await ctx.deleteMessage();
      user.fio = ctx.session.fio;
      await user.save();
      await ctx.reply(`–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. ${ctx.session.fio}`);
      ctx.session.fio = 'none';
      await ctx.scene.enter('base');
    } catch (err) {
      console.log(err.message);
    }
  }
}
