import { Action, Ctx, Hears, On, Scene, SceneEnter } from 'nestjs-telegraf';
import { Injectable } from '@nestjs/common';
import { SceneContext } from 'telegraf/typings/scenes';
import { BotService } from '../bot.service';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';
import { BASE_Q } from '../../../common/constants/url.constant';
import { QuestionService } from '../../question/question.service';
import { UserEntity } from '../../user/entities/user.entity';
import { In } from 'typeorm';
import { RoleEnum } from '../../../common/enums/role.enum';
import { ISession } from '../../../common/interfaces/session.interface';

@Injectable()
@Scene('askQuestion')
export class AskQuestionScene {
  constructor(
    private readonly botService: BotService,
    private readonly httpService: HttpService,
    private readonly questionService: QuestionService,
  ) {}
  @SceneEnter()
  async enter(@Ctx() ctx: SceneContext) {
    await ctx.reply(
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –£ —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å? ü§î\n',
    );
  }

  @Hears('/menu')
  async returnBase(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Hears('/stop')
  async stop(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Action(/confused/)
  async confused(@Ctx() ctx: SceneContext & ISession) {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    console.error(ctx);
    await this.botService.forwardToAdmins(
      ctx.session.question_id,
      ctx.session.chat_id,
      ctx.session.from,
      true,
    );
    await ctx.reply(
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! üôè –ú—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ –µ–≥–æ –Ω–∞—à–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è. üïµÔ∏è‚Äç‚ôÇÔ∏è –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç. üì¨ –ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö. ü§î\n',
    );
    await ctx.scene.enter('base');
  }

  @Action(/helped/)
  async helped(@Ctx() ctx: SceneContext) {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üåü');
    await ctx.scene.enter('base');
  }

  @On('message')
  async answerToQuestion(@Ctx() ctx: SceneContext & ISession) {
    try {
      const question = ctx.message['text'];
      const { data } = await firstValueFrom(
        this.httpService.post<{ message: string; code: number }>(BASE_Q, {
          question: question,
        }),
      );
      ctx.session.question_id = ctx.message.message_id;
      ctx.session.chat_id = ctx.message.chat.id;
      ctx.session.from = ctx.message.from.username;

      if (data.code !== 200) {
        const new_question = {
          question_text: question || '',
          who_asked: ctx.message.from.id.toString(),
        };

        await this.botService.forwardToAdmins(
          ctx.message.message_id,
          ctx.message.chat.id,
          ctx.message.from.username,
          false,
        );
        await this.questionService.create(new_question);

        await ctx.reply(
          `${data.message} –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.`,
        );
      } else {
        await ctx.reply(data.message, {
          reply_markup: await this.botService.showSatisfyButtons(),
        });
      }
    } catch (err) {
      console.log(err);
      await ctx.reply('Server not responding.');
    }
  }
}
